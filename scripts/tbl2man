#! /usr/bin/env python
#
import sys, os, shutil, traceback
from optparse import OptionParser
import eups
import lssteups
import eupsServer

prog = ""
progannounce = ""

def main():
    global prog, progannounce
    prog = os.path.basename(sys.argv[0])
    progannounce = "%s: " %  prog

    usage = """Usage:
    %s [-Z eupspath] [-z dbz] [-i file] [-o file] product version [ serverDir ]
    """ % prog
    cli = OptionParser(prog=prog, usage=usage)

    cli.add_option("-Z", "--database", action="store", dest="eupspath", 
                   help="Use this products path. Default: $EUPS_PATH")
    cli.add_option("-z", "--select-db", action="store", dest="dbz", 
                   help="Select the product paths which contain this directory")
    cli.add_option("-i", "--input-file", action="store", dest="inp",
                   help="Send output manifest to the named file")
    cli.add_option("-o", "--output-file", action="store", dest="out",
                   help="Send output manifest to the named file")
    cli.add_option("-v", "--verbose", action="count", dest="verbose",
                   default=0,
                   help="Be chattier (repeat for even more chat)")

    (opts, args) = cli.parse_args()

    if len(args) < 1:
        raise RuntimeError("Missing product and version arguments")
    if len(args) < 2:
        raise RuntimeError("Missing version argument")
    if len(args) < 3 and not opts.out:
        raise RuntimeError("Please provide server directory or -o")

    product   = args[0]
    version   = args[1]
    serverDir = None
    if len(args) > 2:  serverDir = args[2]

    try:
        Eups = eups.Eups(path=opts.eupspath, dbz=opts.dbz, 
                         readCache=True, verbose=opts.verbose)

        dist = lssteups.BuildDistrib(Eups, None, Eups.flavor,
                                     verbosity=Eups.verbose)


        if opts.inp:
            dependencies = Eups.dependencies_from_table(opts.inp)
            man = eupsServer.Manifest(product, version, Eups)
            for (dprod, dopt, dcurrent) in dependencies:
                productName = dprod.name
                versionName = dprod.version
                tableName = dprod.tableFileName
                if not tableName:
                    dprod.name + ".table"
                if not versionName:
                    versionName = Eups.findCurrentVersion(productName)[1]
                distid = "lsstbuild:%s-%s.tar.gz"  % (productName, versionName)
                instdir = os.path.join(productName,versionName)
                man.addDependency(productName, versionName, "generic",
                                  tableName, instdir, distid, dopt)

            man.reverse()

        else:
            man = dist.createDependencies(product, version)

        if opts.out:
            man.write(opts.out)
        else:
            dist.writeManifest(serverDir, man, product, version)

    except RuntimeError, e:
        err(str(e))
        traceback.print_tb
        return 2
    except Exception, e:
        err("Sorry! Implementation Error: ", str(e))
        if opts.verbose > 0:
            print >> sys.stderr
            traceback.print_exc()
            traceback.print_tb()
        return 3

    return 0

def err(*args):
    global progannounce
    sys.stderr.write(progannounce)
    for arg in args:
        sys.stderr.write(arg)
    print >> sys.stderr

if __name__ == "__main__":

    import warnings  # ignore tmpnam warnings
    warnings.filterwarnings('ignore', "tmpnam ", RuntimeWarning, "", 0) 

    sys.exit(main())


